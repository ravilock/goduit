// Code generated by mockery v2.52.2. DO NOT EDIT.

package api

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockServer is an autogenerated mock type for the Server type
type MockServer struct {
	mock.Mock
}

type MockServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServer) EXPECT() *MockServer_Expecter {
	return &MockServer_Expecter{mock: &_m.Mock}
}

// ServeHTTP provides a mock function with given fields: _a0, _a1
func (_m *MockServer) ServeHTTP(_a0 http.ResponseWriter, _a1 *http.Request) {
	_m.Called(_a0, _a1)
}

// MockServer_ServeHTTP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServeHTTP'
type MockServer_ServeHTTP_Call struct {
	*mock.Call
}

// ServeHTTP is a helper method to define mock.On call
//   - _a0 http.ResponseWriter
//   - _a1 *http.Request
func (_e *MockServer_Expecter) ServeHTTP(_a0 interface{}, _a1 interface{}) *MockServer_ServeHTTP_Call {
	return &MockServer_ServeHTTP_Call{Call: _e.mock.On("ServeHTTP", _a0, _a1)}
}

func (_c *MockServer_ServeHTTP_Call) Run(run func(_a0 http.ResponseWriter, _a1 *http.Request)) *MockServer_ServeHTTP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockServer_ServeHTTP_Call) Return() *MockServer_ServeHTTP_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServer_ServeHTTP_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *MockServer_ServeHTTP_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *MockServer) Start() {
	_m.Called()
}

// MockServer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockServer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockServer_Expecter) Start() *MockServer_Start_Call {
	return &MockServer_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockServer_Start_Call) Run(run func()) *MockServer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServer_Start_Call) Return() *MockServer_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServer_Start_Call) RunAndReturn(run func()) *MockServer_Start_Call {
	_c.Run(run)
	return _c
}

// NewMockServer creates a new instance of MockServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServer {
	mock := &MockServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
