// Code generated by mockery v2.44.1. DO NOT EDIT.

package services

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockUserUnfollower is an autogenerated mock type for the userUnfollower type
type mockUserUnfollower struct {
	mock.Mock
}

type mockUserUnfollower_Expecter struct {
	mock *mock.Mock
}

func (_m *mockUserUnfollower) EXPECT() *mockUserUnfollower_Expecter {
	return &mockUserUnfollower_Expecter{mock: &_m.Mock}
}

// Unfollow provides a mock function with given fields: ctx, followed, following
func (_m *mockUserUnfollower) Unfollow(ctx context.Context, followed string, following string) error {
	ret := _m.Called(ctx, followed, following)

	if len(ret) == 0 {
		panic("no return value specified for Unfollow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, followed, following)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockUserUnfollower_Unfollow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unfollow'
type mockUserUnfollower_Unfollow_Call struct {
	*mock.Call
}

// Unfollow is a helper method to define mock.On call
//   - ctx context.Context
//   - followed string
//   - following string
func (_e *mockUserUnfollower_Expecter) Unfollow(ctx interface{}, followed interface{}, following interface{}) *mockUserUnfollower_Unfollow_Call {
	return &mockUserUnfollower_Unfollow_Call{Call: _e.mock.On("Unfollow", ctx, followed, following)}
}

func (_c *mockUserUnfollower_Unfollow_Call) Run(run func(ctx context.Context, followed string, following string)) *mockUserUnfollower_Unfollow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockUserUnfollower_Unfollow_Call) Return(_a0 error) *mockUserUnfollower_Unfollow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockUserUnfollower_Unfollow_Call) RunAndReturn(run func(context.Context, string, string) error) *mockUserUnfollower_Unfollow_Call {
	_c.Call.Return(run)
	return _c
}

// newMockUserUnfollower creates a new instance of mockUserUnfollower. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockUserUnfollower(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockUserUnfollower {
	mock := &mockUserUnfollower{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
