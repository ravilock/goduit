// Code generated by mockery v2.52.2. DO NOT EDIT.

package app

import mock "github.com/stretchr/testify/mock"

// MockConsumer is an autogenerated mock type for the Consumer type
type MockConsumer struct {
	mock.Mock
}

type MockConsumer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsumer) EXPECT() *MockConsumer_Expecter {
	return &MockConsumer_Expecter{mock: &_m.Mock}
}

// Consume provides a mock function with no fields
func (_m *MockConsumer) Consume() <-chan Message {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Consume")
	}

	var r0 <-chan Message
	if rf, ok := ret.Get(0).(func() <-chan Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan Message)
		}
	}

	return r0
}

// MockConsumer_Consume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Consume'
type MockConsumer_Consume_Call struct {
	*mock.Call
}

// Consume is a helper method to define mock.On call
func (_e *MockConsumer_Expecter) Consume() *MockConsumer_Consume_Call {
	return &MockConsumer_Consume_Call{Call: _e.mock.On("Consume")}
}

func (_c *MockConsumer_Consume_Call) Run(run func()) *MockConsumer_Consume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsumer_Consume_Call) Return(_a0 <-chan Message) *MockConsumer_Consume_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumer_Consume_Call) RunAndReturn(run func() <-chan Message) *MockConsumer_Consume_Call {
	_c.Call.Return(run)
	return _c
}

// StartConsumer provides a mock function with no fields
func (_m *MockConsumer) StartConsumer() {
	_m.Called()
}

// MockConsumer_StartConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartConsumer'
type MockConsumer_StartConsumer_Call struct {
	*mock.Call
}

// StartConsumer is a helper method to define mock.On call
func (_e *MockConsumer_Expecter) StartConsumer() *MockConsumer_StartConsumer_Call {
	return &MockConsumer_StartConsumer_Call{Call: _e.mock.On("StartConsumer")}
}

func (_c *MockConsumer_StartConsumer_Call) Run(run func()) *MockConsumer_StartConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsumer_StartConsumer_Call) Return() *MockConsumer_StartConsumer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_StartConsumer_Call) RunAndReturn(run func()) *MockConsumer_StartConsumer_Call {
	_c.Run(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockConsumer) Stop() {
	_m.Called()
}

// MockConsumer_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockConsumer_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockConsumer_Expecter) Stop() *MockConsumer_Stop_Call {
	return &MockConsumer_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockConsumer_Stop_Call) Run(run func()) *MockConsumer_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsumer_Stop_Call) Return() *MockConsumer_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumer_Stop_Call) RunAndReturn(run func()) *MockConsumer_Stop_Call {
	_c.Run(run)
	return _c
}

// NewMockConsumer creates a new instance of MockConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsumer {
	mock := &MockConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
