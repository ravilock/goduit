// Code generated by mockery v2.52.2. DO NOT EDIT.

package app

import mock "github.com/stretchr/testify/mock"

// MockMessage is an autogenerated mock type for the Message type
type MockMessage struct {
	mock.Mock
}

type MockMessage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessage) EXPECT() *MockMessage_Expecter {
	return &MockMessage_Expecter{mock: &_m.Mock}
}

// Data provides a mock function with no fields
func (_m *MockMessage) Data() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockMessage_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type MockMessage_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
func (_e *MockMessage_Expecter) Data() *MockMessage_Data_Call {
	return &MockMessage_Data_Call{Call: _e.mock.On("Data")}
}

func (_c *MockMessage_Data_Call) Run(run func()) *MockMessage_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessage_Data_Call) Return(_a0 []byte) *MockMessage_Data_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessage_Data_Call) RunAndReturn(run func() []byte) *MockMessage_Data_Call {
	_c.Call.Return(run)
	return _c
}

// Failure provides a mock function with given fields: _a0
func (_m *MockMessage) Failure(_a0 error) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Failure")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessage_Failure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Failure'
type MockMessage_Failure_Call struct {
	*mock.Call
}

// Failure is a helper method to define mock.On call
//   - _a0 error
func (_e *MockMessage_Expecter) Failure(_a0 interface{}) *MockMessage_Failure_Call {
	return &MockMessage_Failure_Call{Call: _e.mock.On("Failure", _a0)}
}

func (_c *MockMessage_Failure_Call) Run(run func(_a0 error)) *MockMessage_Failure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *MockMessage_Failure_Call) Return(_a0 error) *MockMessage_Failure_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessage_Failure_Call) RunAndReturn(run func(error) error) *MockMessage_Failure_Call {
	_c.Call.Return(run)
	return _c
}

// Success provides a mock function with no fields
func (_m *MockMessage) Success() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Success")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMessage_Success_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Success'
type MockMessage_Success_Call struct {
	*mock.Call
}

// Success is a helper method to define mock.On call
func (_e *MockMessage_Expecter) Success() *MockMessage_Success_Call {
	return &MockMessage_Success_Call{Call: _e.mock.On("Success")}
}

func (_c *MockMessage_Success_Call) Run(run func()) *MockMessage_Success_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMessage_Success_Call) Return(_a0 error) *MockMessage_Success_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMessage_Success_Call) RunAndReturn(run func() error) *MockMessage_Success_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessage creates a new instance of MockMessage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessage {
	mock := &MockMessage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
