// Code generated by mockery v2.53.2. DO NOT EDIT.

package handlers

import (
	context "context"

	models "github.com/ravilock/goduit/internal/articlePublisher/models"
	mock "github.com/stretchr/testify/mock"
)

// mockArticleUpdater is an autogenerated mock type for the articleUpdater type
type mockArticleUpdater struct {
	mock.Mock
}

type mockArticleUpdater_Expecter struct {
	mock *mock.Mock
}

func (_m *mockArticleUpdater) EXPECT() *mockArticleUpdater_Expecter {
	return &mockArticleUpdater_Expecter{mock: &_m.Mock}
}

// UpdateArticle provides a mock function with given fields: ctx, slug, article
func (_m *mockArticleUpdater) UpdateArticle(ctx context.Context, slug string, article *models.Article) error {
	ret := _m.Called(ctx, slug, article)

	if len(ret) == 0 {
		panic("no return value specified for UpdateArticle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.Article) error); ok {
		r0 = rf(ctx, slug, article)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockArticleUpdater_UpdateArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateArticle'
type mockArticleUpdater_UpdateArticle_Call struct {
	*mock.Call
}

// UpdateArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - slug string
//   - article *models.Article
func (_e *mockArticleUpdater_Expecter) UpdateArticle(ctx interface{}, slug interface{}, article interface{}) *mockArticleUpdater_UpdateArticle_Call {
	return &mockArticleUpdater_UpdateArticle_Call{Call: _e.mock.On("UpdateArticle", ctx, slug, article)}
}

func (_c *mockArticleUpdater_UpdateArticle_Call) Run(run func(ctx context.Context, slug string, article *models.Article)) *mockArticleUpdater_UpdateArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*models.Article))
	})
	return _c
}

func (_c *mockArticleUpdater_UpdateArticle_Call) Return(_a0 error) *mockArticleUpdater_UpdateArticle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockArticleUpdater_UpdateArticle_Call) RunAndReturn(run func(context.Context, string, *models.Article) error) *mockArticleUpdater_UpdateArticle_Call {
	_c.Call.Return(run)
	return _c
}

// newMockArticleUpdater creates a new instance of mockArticleUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockArticleUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockArticleUpdater {
	mock := &mockArticleUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
