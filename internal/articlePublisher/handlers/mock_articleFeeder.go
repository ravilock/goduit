// Code generated by mockery v2.52.2. DO NOT EDIT.

package handlers

import (
	context "context"

	models "github.com/ravilock/goduit/internal/articlePublisher/models"
	mock "github.com/stretchr/testify/mock"
)

// mockArticleFeeder is an autogenerated mock type for the articleFeeder type
type mockArticleFeeder struct {
	mock.Mock
}

type mockArticleFeeder_Expecter struct {
	mock *mock.Mock
}

func (_m *mockArticleFeeder) EXPECT() *mockArticleFeeder_Expecter {
	return &mockArticleFeeder_Expecter{mock: &_m.Mock}
}

// FeedArticles provides a mock function with given fields: ctx, user, limit, offset
func (_m *mockArticleFeeder) FeedArticles(ctx context.Context, user string, limit int64, offset int64) ([]*models.Article, error) {
	ret := _m.Called(ctx, user, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for FeedArticles")
	}

	var r0 []*models.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) ([]*models.Article, error)); ok {
		return rf(ctx, user, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) []*models.Article); ok {
		r0 = rf(ctx, user, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64, int64) error); ok {
		r1 = rf(ctx, user, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockArticleFeeder_FeedArticles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FeedArticles'
type mockArticleFeeder_FeedArticles_Call struct {
	*mock.Call
}

// FeedArticles is a helper method to define mock.On call
//   - ctx context.Context
//   - user string
//   - limit int64
//   - offset int64
func (_e *mockArticleFeeder_Expecter) FeedArticles(ctx interface{}, user interface{}, limit interface{}, offset interface{}) *mockArticleFeeder_FeedArticles_Call {
	return &mockArticleFeeder_FeedArticles_Call{Call: _e.mock.On("FeedArticles", ctx, user, limit, offset)}
}

func (_c *mockArticleFeeder_FeedArticles_Call) Run(run func(ctx context.Context, user string, limit int64, offset int64)) *mockArticleFeeder_FeedArticles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *mockArticleFeeder_FeedArticles_Call) Return(_a0 []*models.Article, _a1 error) *mockArticleFeeder_FeedArticles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockArticleFeeder_FeedArticles_Call) RunAndReturn(run func(context.Context, string, int64, int64) ([]*models.Article, error)) *mockArticleFeeder_FeedArticles_Call {
	_c.Call.Return(run)
	return _c
}

// newMockArticleFeeder creates a new instance of mockArticleFeeder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockArticleFeeder(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockArticleFeeder {
	mock := &mockArticleFeeder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
