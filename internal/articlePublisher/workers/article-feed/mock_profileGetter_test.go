// Code generated by mockery v2.52.2. DO NOT EDIT.

package articlefeed

import (
	context "context"

	models "github.com/ravilock/goduit/internal/profileManager/models"
	mock "github.com/stretchr/testify/mock"
)

// mockProfileGetter is an autogenerated mock type for the profileGetter type
type mockProfileGetter struct {
	mock.Mock
}

type mockProfileGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockProfileGetter) EXPECT() *mockProfileGetter_Expecter {
	return &mockProfileGetter_Expecter{mock: &_m.Mock}
}

// GetUserByID provides a mock function with given fields: ctx, ID
func (_m *mockProfileGetter) GetUserByID(ctx context.Context, ID string) (*models.User, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockProfileGetter_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type mockProfileGetter_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID string
func (_e *mockProfileGetter_Expecter) GetUserByID(ctx interface{}, ID interface{}) *mockProfileGetter_GetUserByID_Call {
	return &mockProfileGetter_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, ID)}
}

func (_c *mockProfileGetter_GetUserByID_Call) Run(run func(ctx context.Context, ID string)) *mockProfileGetter_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockProfileGetter_GetUserByID_Call) Return(_a0 *models.User, _a1 error) *mockProfileGetter_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockProfileGetter_GetUserByID_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *mockProfileGetter_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// newMockProfileGetter creates a new instance of mockProfileGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockProfileGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockProfileGetter {
	mock := &mockProfileGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
