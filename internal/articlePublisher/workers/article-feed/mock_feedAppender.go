// Code generated by mockery v2.53.2. DO NOT EDIT.

package articlefeed

import (
	context "context"

	models "github.com/ravilock/goduit/internal/articlePublisher/models"
	mock "github.com/stretchr/testify/mock"

	profileManagermodels "github.com/ravilock/goduit/internal/profileManager/models"
)

// mockFeedAppender is an autogenerated mock type for the feedAppender type
type mockFeedAppender struct {
	mock.Mock
}

type mockFeedAppender_Expecter struct {
	mock *mock.Mock
}

func (_m *mockFeedAppender) EXPECT() *mockFeedAppender_Expecter {
	return &mockFeedAppender_Expecter{mock: &_m.Mock}
}

// AppendArticleToUserFeeds provides a mock function with given fields: ctx, article, author, userIDs
func (_m *mockFeedAppender) AppendArticleToUserFeeds(ctx context.Context, article *models.Article, author *profileManagermodels.User, userIDs []string) error {
	ret := _m.Called(ctx, article, author, userIDs)

	if len(ret) == 0 {
		panic("no return value specified for AppendArticleToUserFeeds")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Article, *profileManagermodels.User, []string) error); ok {
		r0 = rf(ctx, article, author, userIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockFeedAppender_AppendArticleToUserFeeds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendArticleToUserFeeds'
type mockFeedAppender_AppendArticleToUserFeeds_Call struct {
	*mock.Call
}

// AppendArticleToUserFeeds is a helper method to define mock.On call
//   - ctx context.Context
//   - article *models.Article
//   - author *profileManagermodels.User
//   - userIDs []string
func (_e *mockFeedAppender_Expecter) AppendArticleToUserFeeds(ctx interface{}, article interface{}, author interface{}, userIDs interface{}) *mockFeedAppender_AppendArticleToUserFeeds_Call {
	return &mockFeedAppender_AppendArticleToUserFeeds_Call{Call: _e.mock.On("AppendArticleToUserFeeds", ctx, article, author, userIDs)}
}

func (_c *mockFeedAppender_AppendArticleToUserFeeds_Call) Run(run func(ctx context.Context, article *models.Article, author *profileManagermodels.User, userIDs []string)) *mockFeedAppender_AppendArticleToUserFeeds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Article), args[2].(*profileManagermodels.User), args[3].([]string))
	})
	return _c
}

func (_c *mockFeedAppender_AppendArticleToUserFeeds_Call) Return(_a0 error) *mockFeedAppender_AppendArticleToUserFeeds_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockFeedAppender_AppendArticleToUserFeeds_Call) RunAndReturn(run func(context.Context, *models.Article, *profileManagermodels.User, []string) error) *mockFeedAppender_AppendArticleToUserFeeds_Call {
	_c.Call.Return(run)
	return _c
}

// newMockFeedAppender creates a new instance of mockFeedAppender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockFeedAppender(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockFeedAppender {
	mock := &mockFeedAppender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
