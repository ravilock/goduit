// Code generated by mockery v2.53.2. DO NOT EDIT.

package articlefeed

import (
	context "context"

	models "github.com/ravilock/goduit/internal/followerCentral/models"
	mock "github.com/stretchr/testify/mock"
)

// mockFollowersGetter is an autogenerated mock type for the followersGetter type
type mockFollowersGetter struct {
	mock.Mock
}

type mockFollowersGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockFollowersGetter) EXPECT() *mockFollowersGetter_Expecter {
	return &mockFollowersGetter_Expecter{mock: &_m.Mock}
}

// GetFollowers provides a mock function with given fields: ctx, followed
func (_m *mockFollowersGetter) GetFollowers(ctx context.Context, followed string) ([]*models.Follower, error) {
	ret := _m.Called(ctx, followed)

	if len(ret) == 0 {
		panic("no return value specified for GetFollowers")
	}

	var r0 []*models.Follower
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.Follower, error)); ok {
		return rf(ctx, followed)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.Follower); ok {
		r0 = rf(ctx, followed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Follower)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, followed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockFollowersGetter_GetFollowers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFollowers'
type mockFollowersGetter_GetFollowers_Call struct {
	*mock.Call
}

// GetFollowers is a helper method to define mock.On call
//   - ctx context.Context
//   - followed string
func (_e *mockFollowersGetter_Expecter) GetFollowers(ctx interface{}, followed interface{}) *mockFollowersGetter_GetFollowers_Call {
	return &mockFollowersGetter_GetFollowers_Call{Call: _e.mock.On("GetFollowers", ctx, followed)}
}

func (_c *mockFollowersGetter_GetFollowers_Call) Run(run func(ctx context.Context, followed string)) *mockFollowersGetter_GetFollowers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockFollowersGetter_GetFollowers_Call) Return(_a0 []*models.Follower, _a1 error) *mockFollowersGetter_GetFollowers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockFollowersGetter_GetFollowers_Call) RunAndReturn(run func(context.Context, string) ([]*models.Follower, error)) *mockFollowersGetter_GetFollowers_Call {
	_c.Call.Return(run)
	return _c
}

// newMockFollowersGetter creates a new instance of mockFollowersGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockFollowersGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockFollowersGetter {
	mock := &mockFollowersGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
