// Code generated by mockery v2.52.2. DO NOT EDIT.

package services

import (
	context "context"

	models "github.com/ravilock/goduit/internal/articlePublisher/models"
	mock "github.com/stretchr/testify/mock"
)

// mockArticlesGetter is an autogenerated mock type for the articlesGetter type
type mockArticlesGetter struct {
	mock.Mock
}

type mockArticlesGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockArticlesGetter) EXPECT() *mockArticlesGetter_Expecter {
	return &mockArticlesGetter_Expecter{mock: &_m.Mock}
}

// GetArticlesByIDs provides a mock function with given fields: ctx, IDs
func (_m *mockArticlesGetter) GetArticlesByIDs(ctx context.Context, IDs []string) ([]*models.Article, error) {
	ret := _m.Called(ctx, IDs)

	if len(ret) == 0 {
		panic("no return value specified for GetArticlesByIDs")
	}

	var r0 []*models.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]*models.Article, error)); ok {
		return rf(ctx, IDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*models.Article); ok {
		r0 = rf(ctx, IDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, IDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockArticlesGetter_GetArticlesByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArticlesByIDs'
type mockArticlesGetter_GetArticlesByIDs_Call struct {
	*mock.Call
}

// GetArticlesByIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - IDs []string
func (_e *mockArticlesGetter_Expecter) GetArticlesByIDs(ctx interface{}, IDs interface{}) *mockArticlesGetter_GetArticlesByIDs_Call {
	return &mockArticlesGetter_GetArticlesByIDs_Call{Call: _e.mock.On("GetArticlesByIDs", ctx, IDs)}
}

func (_c *mockArticlesGetter_GetArticlesByIDs_Call) Run(run func(ctx context.Context, IDs []string)) *mockArticlesGetter_GetArticlesByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *mockArticlesGetter_GetArticlesByIDs_Call) Return(_a0 []*models.Article, _a1 error) *mockArticlesGetter_GetArticlesByIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockArticlesGetter_GetArticlesByIDs_Call) RunAndReturn(run func(context.Context, []string) ([]*models.Article, error)) *mockArticlesGetter_GetArticlesByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// newMockArticlesGetter creates a new instance of mockArticlesGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockArticlesGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockArticlesGetter {
	mock := &mockArticlesGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
