// Code generated by mockery v2.44.1. DO NOT EDIT.

package handlers

import (
	context "context"

	models "github.com/ravilock/goduit/internal/profileManager/models"
	mock "github.com/stretchr/testify/mock"
)

// mockAuthenticator is an autogenerated mock type for the authenticator type
type mockAuthenticator struct {
	mock.Mock
}

type mockAuthenticator_Expecter struct {
	mock *mock.Mock
}

func (_m *mockAuthenticator) EXPECT() *mockAuthenticator_Expecter {
	return &mockAuthenticator_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *mockAuthenticator) Login(ctx context.Context, email string, password string) (*models.User, string, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *models.User
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.User, string, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.User); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, email, password)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// mockAuthenticator_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type mockAuthenticator_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *mockAuthenticator_Expecter) Login(ctx interface{}, email interface{}, password interface{}) *mockAuthenticator_Login_Call {
	return &mockAuthenticator_Login_Call{Call: _e.mock.On("Login", ctx, email, password)}
}

func (_c *mockAuthenticator_Login_Call) Run(run func(ctx context.Context, email string, password string)) *mockAuthenticator_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockAuthenticator_Login_Call) Return(_a0 *models.User, _a1 string, _a2 error) *mockAuthenticator_Login_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *mockAuthenticator_Login_Call) RunAndReturn(run func(context.Context, string, string) (*models.User, string, error)) *mockAuthenticator_Login_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProfile provides a mock function with given fields: ctx, subjectEmail, clientUsername, password, model
func (_m *mockAuthenticator) UpdateProfile(ctx context.Context, subjectEmail string, clientUsername string, password string, model *models.User) (string, error) {
	ret := _m.Called(ctx, subjectEmail, clientUsername, password, model)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *models.User) (string, error)); ok {
		return rf(ctx, subjectEmail, clientUsername, password, model)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *models.User) string); ok {
		r0 = rf(ctx, subjectEmail, clientUsername, password, model)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *models.User) error); ok {
		r1 = rf(ctx, subjectEmail, clientUsername, password, model)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockAuthenticator_UpdateProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProfile'
type mockAuthenticator_UpdateProfile_Call struct {
	*mock.Call
}

// UpdateProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - subjectEmail string
//   - clientUsername string
//   - password string
//   - model *models.User
func (_e *mockAuthenticator_Expecter) UpdateProfile(ctx interface{}, subjectEmail interface{}, clientUsername interface{}, password interface{}, model interface{}) *mockAuthenticator_UpdateProfile_Call {
	return &mockAuthenticator_UpdateProfile_Call{Call: _e.mock.On("UpdateProfile", ctx, subjectEmail, clientUsername, password, model)}
}

func (_c *mockAuthenticator_UpdateProfile_Call) Run(run func(ctx context.Context, subjectEmail string, clientUsername string, password string, model *models.User)) *mockAuthenticator_UpdateProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*models.User))
	})
	return _c
}

func (_c *mockAuthenticator_UpdateProfile_Call) Return(_a0 string, _a1 error) *mockAuthenticator_UpdateProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockAuthenticator_UpdateProfile_Call) RunAndReturn(run func(context.Context, string, string, string, *models.User) (string, error)) *mockAuthenticator_UpdateProfile_Call {
	_c.Call.Return(run)
	return _c
}

// newMockAuthenticator creates a new instance of mockAuthenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockAuthenticator(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockAuthenticator {
	mock := &mockAuthenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
