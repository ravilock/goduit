// Code generated by mockery v2.44.1. DO NOT EDIT.

package handlers

import (
	context "context"

	models "github.com/ravilock/goduit/internal/profileManager/models"
	mock "github.com/stretchr/testify/mock"
)

// mockProfileRegister is an autogenerated mock type for the profileRegister type
type mockProfileRegister struct {
	mock.Mock
}

type mockProfileRegister_Expecter struct {
	mock *mock.Mock
}

func (_m *mockProfileRegister) EXPECT() *mockProfileRegister_Expecter {
	return &mockProfileRegister_Expecter{mock: &_m.Mock}
}

// Register provides a mock function with given fields: ctx, model, password
func (_m *mockProfileRegister) Register(ctx context.Context, model *models.User, password string) (string, error) {
	ret := _m.Called(ctx, model, password)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User, string) (string, error)); ok {
		return rf(ctx, model, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.User, string) string); ok {
		r0 = rf(ctx, model, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.User, string) error); ok {
		r1 = rf(ctx, model, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockProfileRegister_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type mockProfileRegister_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - model *models.User
//   - password string
func (_e *mockProfileRegister_Expecter) Register(ctx interface{}, model interface{}, password interface{}) *mockProfileRegister_Register_Call {
	return &mockProfileRegister_Register_Call{Call: _e.mock.On("Register", ctx, model, password)}
}

func (_c *mockProfileRegister_Register_Call) Run(run func(ctx context.Context, model *models.User, password string)) *mockProfileRegister_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.User), args[2].(string))
	})
	return _c
}

func (_c *mockProfileRegister_Register_Call) Return(_a0 string, _a1 error) *mockProfileRegister_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockProfileRegister_Register_Call) RunAndReturn(run func(context.Context, *models.User, string) (string, error)) *mockProfileRegister_Register_Call {
	_c.Call.Return(run)
	return _c
}

// newMockProfileRegister creates a new instance of mockProfileRegister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockProfileRegister(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockProfileRegister {
	mock := &mockProfileRegister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
