// Code generated by mockery v2.44.1. DO NOT EDIT.

package services

import (
	context "context"

	models "github.com/ravilock/goduit/internal/profileManager/models"
	mock "github.com/stretchr/testify/mock"
)

// MockUserGetter is an autogenerated mock type for the UserGetter type
type MockUserGetter struct {
	mock.Mock
}

type MockUserGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserGetter) EXPECT() *MockUserGetter_Expecter {
	return &MockUserGetter_Expecter{mock: &_m.Mock}
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockUserGetter) GetUserByEmail(ctx context.Context, email string) (*models.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserGetter_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockUserGetter_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserGetter_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockUserGetter_GetUserByEmail_Call {
	return &MockUserGetter_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockUserGetter_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserGetter_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserGetter_GetUserByEmail_Call) Return(_a0 *models.User, _a1 error) *MockUserGetter_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserGetter_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *MockUserGetter_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, ID
func (_m *MockUserGetter) GetUserByID(ctx context.Context, ID string) (*models.User, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserGetter_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type MockUserGetter_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID string
func (_e *MockUserGetter_Expecter) GetUserByID(ctx interface{}, ID interface{}) *MockUserGetter_GetUserByID_Call {
	return &MockUserGetter_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, ID)}
}

func (_c *MockUserGetter_GetUserByID_Call) Run(run func(ctx context.Context, ID string)) *MockUserGetter_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserGetter_GetUserByID_Call) Return(_a0 *models.User, _a1 error) *MockUserGetter_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserGetter_GetUserByID_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *MockUserGetter_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *MockUserGetter) GetUserByUsername(ctx context.Context, username string) (*models.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserGetter_GetUserByUsername_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByUsername'
type MockUserGetter_GetUserByUsername_Call struct {
	*mock.Call
}

// GetUserByUsername is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUserGetter_Expecter) GetUserByUsername(ctx interface{}, username interface{}) *MockUserGetter_GetUserByUsername_Call {
	return &MockUserGetter_GetUserByUsername_Call{Call: _e.mock.On("GetUserByUsername", ctx, username)}
}

func (_c *MockUserGetter_GetUserByUsername_Call) Run(run func(ctx context.Context, username string)) *MockUserGetter_GetUserByUsername_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserGetter_GetUserByUsername_Call) Return(_a0 *models.User, _a1 error) *MockUserGetter_GetUserByUsername_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserGetter_GetUserByUsername_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *MockUserGetter_GetUserByUsername_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserGetter creates a new instance of MockUserGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserGetter {
	mock := &MockUserGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
